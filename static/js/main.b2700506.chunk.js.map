{"version":3,"sources":["components/NavBar/index.tsx","components/PageNotFound/index.tsx","components/PronunciationCard/index.tsx","components/LexemesCard/index.tsx","components/EntrieCard/index.tsx","components/ResultList/index.tsx","components/searchCard/index.tsx","pages/academic/index.tsx","App.tsx","reportWebVitals.js","index.tsx"],"names":["useStyles","makeStyles","theme","createStyles","root","flexGrow","margin","padding","menuButton","marginRight","spacing","title","NavBar","classes","className","AppBar","position","Toolbar","IconButton","edge","color","aria-label","Typography","variant","PageNotFound","history","useHistory","onClickHandler","React","useCallback","push","style","backgroundImage","process","Button","onClick","table","marginTop","sound","maxWidth","paddingRight","paddingLeft","PronunciationCard","dataEntry","useState","proninciation","setProninciation","useEffect","rows","map","data","region","transcription","audio","Card","CardContent","length","TableContainer","component","Paper","Table","TableHead","TableRow","TableCell","align","TableBody","row","index","size","scope","src","controls","LexemesCard","console","log","lexemes","setLexemes","lexem","Accordion","AccordionSummary","expandIcon","aria-controls","id","AccordionDetails","Grid","container","item","md","xs","List","sense","ListItem","ListItemText","labelunit","Chip","label","filter","aton","hasOwnProperty","lememAntonym","antonymList","Divider","synom","lememSynonym","undefined","synonymList","EntrieCard","ResultList","responseArrayData","responseArray","minWidth","texto","boton","bullet","display","transform","SearchCard","prop","onTipeWord","word","values","setValues","sendWord","TextField","onChange","event","target","value","onKeyDown","e","key","Academic","resultSearch","setResultSearch","setWord","getDictionary","palabra","a","axios","request","method","baseURL","url","headers","response","dataProcessed","processResponse","entries","objProcessed","Object","keys","forEach","array1","dato","uniqueArray","seen","uniq","concat","JSON","stringify","dataUniq","parse","App","Container","fixed","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b2700506.chunk.js","sourcesContent":["import React from 'react';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\n// import Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n      margin: 0,\n      padding: 0\n    },\n    menuButton: {\n      marginRight: theme.spacing(2),\n    },\n    title: {\n      flexGrow: 1,\n    },\n  }),\n);\n\nexport default function NavBar() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" className={classes.title}>\n            Dictionary\n          </Typography>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n","import React from 'react'\nimport { useHistory } from 'react-router-dom'\nimport Button from '@material-ui/core/Button';\n\nimport './index.css'\nconst PageNotFound = () => {\n    const history = useHistory()\n\n    const onClickHandler = React.useCallback(() => {\n        history.push(`/academic`)\n    }, [history])\n\n    return (\n        <div className=\"container-notfound\" style={{\n            backgroundImage: `url(${process.env.PUBLIC_URL + '/assets/empty.svg'})`\n        }}>\n            <Button variant=\"contained\" color=\"primary\" onClick={onClickHandler}>\n                Go to Home\n      </Button>\n        </div>\n    )\n}\n\nexport default PageNotFound\n","import React, { useState, useEffect } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\n\nconst useStyles = makeStyles({\n    table: {\n        marginTop: 1,\n    },\n    sound: {\n        maxWidth: 105,\n        paddingRight: 30,\n        paddingLeft: 1\n    }\n});\n\nfunction createData(region, transcription, audio) {\n    return { region, transcription, audio };\n}\n\nconst PronunciationCard = ({ dataEntry }) => {\n    const [proninciation, setProninciation] = useState([]);\n    const classes = useStyles();\n\n    useEffect(() => {\n        // console.log('PRONUNCIATION', dataEntry)\n        const rows = (dataEntry as any[]).map(data => {\n            return createData(data['context']['regions'], data['transcriptions'] ? data['transcriptions'][0]['transcription'] : '', data['audio'] ? data['audio']['url'] : null)\n        });\n        // console.log(dataEntry)\n        // console.log('ROWS', rows)\n        setProninciation(rows)\n        // return () => {\n        //     cleanup\n        // }\n    }, [dataEntry])\n\n    return (\n        <Card className=\"entrie_card\">\n            <CardContent>\n                {/* <Typography> */}\n                    <strong>Pronunciation</strong>\n                    <br />\n                    <br />\n                    {proninciation.length > 0 ? <TableContainer component={Paper}>\n                        <Table className={classes.table} aria-label=\"simple table\">\n                            <TableHead>\n                                <TableRow>\n                                    <TableCell align=\"left\">Region</TableCell>\n                                    <TableCell align=\"left\">Transcription</TableCell>\n                                    <TableCell align=\"left\">Audio</TableCell>\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {proninciation.map((row, index) => (\n                                    <TableRow key={`${row.region}-${index}`}>\n                                        <TableCell align=\"left\" size=\"small\" scope=\"row\">\n                                            {row.region}\n                                        </TableCell>\n                                        <TableCell align=\"left\">{row.transcription}</TableCell>\n                                        <TableCell align=\"left\">{row.audio ? <audio src={row.audio} className={classes.sound} controls></audio> : 'No Audio'}</TableCell>\n                                    </TableRow>\n                                ))}\n                            </TableBody>\n                        </Table>\n                    </TableContainer> : ''}\n                {/* </Typography> */}\n            </CardContent>\n        </Card>\n    )\n}\n\nexport default PronunciationCard\n","import React, { useEffect, useState } from 'react'\nimport Card from '@material-ui/core/Card';\nimport Typography from '@material-ui/core/Typography';\nimport CardContent from '@material-ui/core/CardContent';\nimport Chip from '@material-ui/core/Chip';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Accordion from '@material-ui/core/Accordion';\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport Divider from '@material-ui/core/Divider';\nimport Grid from '@material-ui/core/Grid'\n\nimport './lexem.css';\n\n\nconst LexemesCard = ({ dataEntry }) => {\n    console.log('LEXE', dataEntry)\n    const [lexemes, setLexemes] = useState([])\n\n    useEffect(() => {\n        setLexemes(dataEntry)\n        // return () => {\n        //     cleanup\n        // }\n    }, [dataEntry])\n    return (\n        <Card className=\"entrie_card\">\n            {\n                lexemes.length > 0 ? <CardContent>\n                    <div>\n                        <strong>Lexemes</strong>\n                        <br />\n                        <br />\n                        {lexemes.map((lexem, index) => {\n                            return (\n                                <div key={`${lexem['lemma']}-${index}`}>\n                                    <Accordion>\n                                        <AccordionSummary\n                                            expandIcon={<ExpandMoreIcon />}\n                                            aria-controls=\"panel1a-content\"\n                                            id=\"panel1a-header\" >\n                                            <Typography>Definitions: {lexem['lemma']} | <small>{lexem['partOfSpeech']}</small> </Typography>\n                                        </AccordionSummary>\n                                        <AccordionDetails>\n                                            <Grid container>\n                                                <Grid item md={12} xs={12}>\n                                                    <List className=\"lista\">\n\n                                                        {lexem['senses'].map((sense, index) => {\n                                                            return (\n                                                                <ListItem key={`${sense['definition'].length}-${index}`} >\n                                                                    <ListItemText>\n                                                                        {sense['labels'] ? sense['labels'].map((labelunit) => (<Chip\n                                                                            label={labelunit}\n                                                                            color=\"secondary\"\n                                                                            size=\"small\"\n                                                                            className=\"chips\"\n                                                                        />)) : ''}   {sense['definition']}\n                                                                        <br />\n                                                                        {sense['usageExamples'] ? <div>\n                                                                            <small><strong>Example:</strong></small>\n                                                                            {sense['usageExamples']}\n                                                                        </div> : ''}\n                                                                    </ListItemText>\n                                                                </ListItem>\n                                                            )\n                                                        })\n                                                        }\n                                                    </List>\n\n                                                </Grid>\n                                            </Grid>\n                                        </AccordionDetails>\n                                    </Accordion>\n                                </div>\n                            )\n                        })}\n                        <br />\n                        {lexemes.map(data => data['antonymSets']).length > 0 ?\n                            <Accordion>\n                                <AccordionSummary\n                                    expandIcon={<ExpandMoreIcon />}\n                                    aria-controls=\"panel1a-content\"\n                                    id=\"panel1a-header\" >\n                                    <Typography variant=\"h6\">Antonyms  </Typography>\n                                </AccordionSummary>\n                                <AccordionDetails>\n                                    <Grid container>\n                                        <Grid item md={12} xs={12}>\n                                            <List className=\"lista\">\n                                                {lexemes.filter(aton => aton.hasOwnProperty('antonymSets')).map((lememAntonym, index) => {\n                                                    return (\n                                                        <ListItem key={`${lememAntonym['lemma']}-${index}-antonym`}>\n                                                            {\n                                                                <List >\n                                                                    {\n                                                                        lememAntonym['antonymSets'] ? lememAntonym['antonymSets'].map((antonymList) => {\n                                                                            return (\n                                                                                <ListItem className=\"items_antonimos\" key={`${antonymList['antonyms'].length}-${antonymList['sense']}`}>\n                                                                                    {antonymList['sense']?`${antonymList['antonyms']}  :   ${antonymList['sense']}`:`${antonymList['antonyms']}`}\n                                                                                    <Divider />\n                                                                                </ListItem>\n                                                                            )\n                                                                        }) : ''\n                                                                    }\n                                                                </List>\n\n                                                            }\n                                                        </ListItem>\n                                                    )\n                                                })}\n                                            </List>\n                                        </Grid>\n                                    </Grid>\n                                </AccordionDetails>\n                            </Accordion> : ''}\n                            <br />\n                        {lexemes.map(data => data['synonymSets']).length > 0 ?\n                            <Accordion>\n                                <AccordionSummary\n                                    expandIcon={<ExpandMoreIcon />}\n                                    aria-controls=\"panel1a-content\"\n                                    id=\"panel1a-header\" >\n                                    <Typography variant=\"h6\">Synonyms</Typography>\n                                </AccordionSummary>\n                                <AccordionDetails>\n                                    <Grid container>\n                                        <Grid item md={12} xs={12}>\n                                            <List className=\"lista\">\n                                                {lexemes.filter(synom => synom.hasOwnProperty('synonymSets')).map((lememSynonym, index) => {\n                                                    return (\n                                                        <ListItem key={`${lememSynonym['lemma']}-${index}-synonym`}>\n                                                            {\n                                                                <List >\n                                                                    {\n                                                                        lememSynonym['synonymSets'] !== undefined && lememSynonym['synonymSets'].map((synonymList) => {\n                                                                            return (\n                                                                                <ListItem className=\"items_antonimos\" key={`${synonymList['synonyms'].length}-${synonymList['sense']}`}>\n                                                                                    {/* {`${synonymList['synonyms']}  :   ${synonymList['sense']}`} */}\n                                                                                    {synonymList['sense']?`${synonymList['synonyms']}  :   ${synonymList['sense']}`:`${synonymList['synonyms']}`}\n\n                                                                                    <Divider />\n                                                                                </ListItem>\n                                                                            )\n                                                                        })\n                                                                    }\n                                                                </List>\n\n                                                            }\n                                                        </ListItem>\n                                                    )\n                                                })}\n                                            </List>\n                                        </Grid>\n                                    </Grid>\n                                </AccordionDetails>\n                            </Accordion> : ''}\n                            <br/>\n                            {/* <div>\n                            <Accordion className=\"acordeon\">\n                                <AccordionSummary className=\"acordeon\"\n                                    expandIcon={<ExpandMoreIcon />}\n                                    aria-controls=\"panel1a-content1\"\n                                    id=\"panel1a-header1\" >\n                                    <Typography variant=\"h6\">Froms </Typography>\n                                </AccordionSummary>\n                                <AccordionDetails>holis </AccordionDetails>\n                            </Accordion>\n                            </div> */}\n\n                    </div>\n                </CardContent> : ''\n            }\n        </Card>\n    )\n}\n\nexport default LexemesCard\n","import React from 'react'\nimport Card from '@material-ui/core/Card';\nimport Typography from '@material-ui/core/Typography';\nimport CardContent from '@material-ui/core/CardContent';\n\n\n\nconst EntrieCard = ({dataEntry}) => {\n    return (\n        <Card className=\"entrie_card\">\n            <CardContent>\n                <Typography>\n                    <strong>{dataEntry}</strong>\n                </Typography>\n            </CardContent>\n        </Card>\n    )\n}\n\nexport default EntrieCard\n","import React from 'react'\nimport PronunciationCard from '../PronunciationCard'\n// import InterpretationCard from '../InterpretationCard'\nimport LexemesCard from '../LexemesCard'\nimport EntrieCard from '../EntrieCard'\n\nconst renderCards = (responseArrayData) => {\n    return (\n        <div>\n            <EntrieCard dataEntry={responseArrayData['entry']} />\n            {responseArrayData['pronunciations']?<PronunciationCard dataEntry={responseArrayData['pronunciations']} />: ''}\n            {/* {responseArrayData['interpretations'] ?<InterpretationCard dataEntry={responseArrayData['interpretations']} />:'' } */}\n            {responseArrayData['lexemes']?<LexemesCard dataEntry={responseArrayData['lexemes']} />:'Lexemes not Found'}\n        </div>\n    )\n}\n\nconst ResultList = ({ responseArray }) => {\n    console.log(responseArray)\n    return (\n        <div>\n            {/* {responseArray.entries? responseArray.entries[0].entry: \"no hay nada\" } */}\n            {responseArray['entry'] ?renderCards(responseArray) : (\"no hay nada\")}\n\n        </div>\n    )\n}\n\nexport default ResultList;\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\n// import CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\n\nconst useStyles = makeStyles({\n    root: {\n        minWidth: 275,\n        marginTop: 20\n    },\n    texto: {\n        margin: '0 2px',\n    },\n    boton: {\n        margin: '0 2px',\n        // height: '150%'\n    },\n    bullet: {\n        display: 'inline-block',\n        margin: '0 2px',\n        transform: 'scale(0.8)',\n    },\n});\n\ninterface State {\n    word: string;\n}\n\nconst SearchCard = ({ onTipeWord }) => {\n    const classes = useStyles();\n    // const bull = <span className={classes.bullet}>•</span>;\n\n    const [values, setValues] = React.useState<State>({\n        word: '',\n    });\n\n    const _handleKeyDown = (e: any) => {\n        if (e.key === 'Enter') {\n            console.log('do validate', values.word);\n            sendWord();\n        }\n    }\n\n    const handleChange = (prop: keyof State) => (event: React.ChangeEvent<HTMLInputElement>) => {\n        setValues({ ...values, [prop]: event.target.value });\n    };\n\n    const sendWord = () => {\n        onTipeWord(values.word);\n    }\n\n    return (\n        <Card className={classes.root}>\n            <CardContent>\n\n                <Typography variant=\"h5\" component=\"h2\">\n                    What word do you want to search for?\n        </Typography>\n                <TextField size=\"small\" className={classes.texto} id=\"outlined-basic\" label=\"Type your word\" variant=\"outlined\"\n                    onChange={handleChange('word')} onKeyDown={_handleKeyDown} value={values.word} />\n                <Button className={classes.boton} size=\"large\" variant=\"outlined\" color=\"primary\" onClick={sendWord}>\n                    Search\n                </Button>\n            </CardContent>\n        </Card>\n    );\n}\n\nexport default SearchCard;","import axios from 'axios';\nimport React, { useEffect, useState } from 'react'\nimport ResultList from '../../components/ResultList';\nimport SearchCard from '../../components/searchCard';\n\nconst Academic = () => {\n    const [resultSearch, setResultSearch] = useState({})\n    const [word, setWord] = useState('');\n\n\n  useEffect(() => {\n\n    const getDictionary = async (palabra) => {\n      console.log('get dictionary', palabra)\n      try {\n        if (palabra !== '') {\n          const response = await axios.request({\n            method: 'GET',\n            baseURL: 'https://lingua-robot.p.rapidapi.com/language/v1',\n            url: `/entries/en/${palabra}`,\n            headers: {\n              'x-rapidapi-key': `${process.env.REACT_APP_API_KEY}`,\n              'x-rapidapi-host': 'lingua-robot.p.rapidapi.com'\n            }\n          });\n          const dataProcessed = processResponse(response.data.entries);\n          setResultSearch(dataProcessed);\n        }\n      } catch (error) {\n        console.log('ÉRROR', error)\n      }\n    }\n\n    const processResponse = (values: any[]) => {\n      console.log('pross', values)\n      const objProcessed = {}\n      Object.keys(values[0]).forEach(key => {\n        // console.log(key)\n        if (key !== 'entry') {\n          const array1 = values.map(dato => dato[key]);\n          // console.log('array1', array1)\n          const array2 = [].concat(...array1);\n          // console.log('array2', array2)\n          const uniqueArray = uniq(array2.map(data => JSON.stringify(data))).map(dataUniq => JSON.parse(dataUniq))\n          // console.log('uniqueArray1', uniqueArray)\n          objProcessed[key] = uniqueArray\n        }\n      });\n      // console.log(objProcessed)\n      objProcessed['entry'] = values[0]['entry']\n      delete objProcessed['license']\n      delete objProcessed['sourceUrls']\n      return objProcessed\n    }\n    // // return () => {\n    // //   cleanup\n    // // }\n    getDictionary(word);\n  }, [word])\n  function uniq(a) {\n    var seen = {};\n    return a.filter(function (item) {\n      return seen.hasOwnProperty(item) ? false : (seen[item] = true);\n    });\n  }\n    return (\n        <div>\n            <SearchCard onTipeWord={(value) => {\n          console.log(value)\n          setWord(value);\n        }} />\n        <br />\n        <ResultList responseArray={resultSearch} ></ResultList>\n        </div>\n    )\n}\n\nexport default Academic\n","import React, {FC } from 'react'\nimport NavBar from './components/NavBar';\nimport Container from '@material-ui/core/Container';\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from 'react-router-dom'\n\n\nimport './App.css';\nimport PageNotFound from './components/PageNotFound';\nimport Academic from './pages/academic';\n\nconst App: FC = () => {\n\n  return (\n    <div className=\"contenedor_general\">\n      <NavBar />\n      <Container fixed>\n        <Router>\n          <Switch>\n            <Route path=\"/academic\">\n              <Academic/> \n            </Route>\n            <Route path=\"/urban\">\n              urban\n            </Route>\n            <Route>\n              <PageNotFound/>\n            </Route>\n          </Switch>\n        </Router>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(<App />,                                    \n  document.getElementById('root'))\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}