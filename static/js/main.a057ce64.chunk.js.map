{"version":3,"sources":["components/NavBar/index.tsx","components/searchCard/index.tsx","components/PronunciationCard/index.tsx","components/InterpretationCard/index.tsx","components/LexemesCard/index.tsx","components/ResultList/index.tsx","App.tsx","reportWebVitals.js","index.tsx"],"names":["useStyles","makeStyles","theme","createStyles","root","flexGrow","margin","padding","menuButton","marginRight","spacing","title","NavBar","classes","className","AppBar","position","Toolbar","IconButton","edge","color","aria-label","Typography","variant","minWidth","marginTop","texto","boton","bullet","display","transform","SearchCard","prop","onTipeWord","React","useState","word","values","setValues","sendWord","Card","CardContent","component","TextField","size","id","label","onChange","event","target","value","onKeyDown","e","key","console","log","Button","onClick","table","sound","maxWidth","paddingRight","paddingLeft","PronunciationCard","nameEntry","dataEntry","rows","map","data","region","transcription","audio","TableContainer","Paper","Table","TableHead","TableRow","TableCell","align","TableBody","row","scope","src","controls","InterpretationCard","LexemesCard","ResultList","responseArrayData","responseArray","App","resultSearch","setResultSearch","setWord","useEffect","getDictionary","palabra","a","axios","request","method","baseURL","url","headers","process","REACT_APP_API_KEY","response","dataProcessed","processResponse","entries","objProcessed","Object","keys","forEach","array1","dato","uniqueArray","seen","filter","item","hasOwnProperty","uniq","concat","JSON","stringify","dataUniq","parse","Container","fixed","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a057ce64.chunk.js","sourcesContent":["import React from 'react';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\n// import Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n      margin: 0,\n      padding: 0\n    },\n    menuButton: {\n      marginRight: theme.spacing(2),\n    },\n    title: {\n      flexGrow: 1,\n    },\n  }),\n);\n\nexport default function NavBar() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" className={classes.title}>\n            Dictionary\n          </Typography>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\n// import CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\n\nconst useStyles = makeStyles({\n    root: {\n        minWidth: 275,\n        marginTop: 20\n    },\n    texto: {\n        margin: '0 2px',\n    },\n    boton: {\n        margin: '0 2px',\n        // height: '150%'\n    },\n    bullet: {\n        display: 'inline-block',\n        margin: '0 2px',\n        transform: 'scale(0.8)',\n    },\n});\n\ninterface State {\n    word: string;\n}\n\nconst SearchCard = ({ onTipeWord }) => {\n    const classes = useStyles();\n    // const bull = <span className={classes.bullet}>â€¢</span>;\n\n    const [values, setValues] = React.useState<State>({\n        word: '',\n    });\n\n    const _handleKeyDown = (e: any) => {\n        if (e.key === 'Enter') {\n            console.log('do validate', values.word);\n            sendWord();\n        }\n    }\n\n    const handleChange = (prop: keyof State) => (event: React.ChangeEvent<HTMLInputElement>) => {\n        setValues({ ...values, [prop]: event.target.value });\n    };\n\n    const sendWord = () => {\n        onTipeWord(values.word);\n    }\n\n    return (\n        <Card className={classes.root}>\n            <CardContent>\n\n                <Typography variant=\"h5\" component=\"h2\">\n                    What word do you want to search for?\n        </Typography>\n                <TextField size=\"small\" className={classes.texto} id=\"outlined-basic\" label=\"Type your word\" variant=\"outlined\"\n                    onChange={handleChange('word')} onKeyDown={_handleKeyDown} value={values.word} />\n                <Button className={classes.boton} size=\"large\" variant=\"outlined\" color=\"primary\" onClick={sendWord}>\n                    Search\n                </Button>\n            </CardContent>\n        </Card>\n    );\n}\n\nexport default SearchCard;","import React from 'react'\nimport Card from '@material-ui/core/Card';\nimport Typography from '@material-ui/core/Typography';\nimport CardContent from '@material-ui/core/CardContent';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\n\nconst useStyles = makeStyles({\n    table: {\n        marginTop: 1,\n    },\n    sound: {\n        maxWidth: 105,\n        paddingRight: 30,\n        paddingLeft: 1\n    }\n  });\n  \n  function createData(region, transcription, audio) {\n    return { region, transcription, audio};\n  }\n  \n//   const rows = [\n//     createData('Frozen yoghurt', 159, 6.0),\n//     createData('Ice cream sandwich', 237, 9.0,),\n//     createData('Eclair', 262, 16.0),\n//     createData('Cupcake', 305, 3.7),\n//     createData('Gingerbread', 356, 16.0),\n//   ];\n\nconst PronunciationCard = ({ nameEntry, dataEntry }) => {\n    const classes = useStyles();\n    const rows = (dataEntry as any[]).map(data => {\n        return createData(data['context']['regions'],data['transcriptions'][0]['transcription'],data['audio']?data['audio']['url']:null)\n    });\n\n    console.log(dataEntry)\n    console.log(rows)\n    return (\n        <Card className=\"entrie_card\">\n            <CardContent>\n                <Typography>\n                    <strong>{nameEntry}</strong>\n                    <br />\n                    Pronunciation\n                    <br />\n                    <TableContainer component={Paper}>\n                        <Table className={classes.table} aria-label=\"simple table\">\n                            <TableHead>\n                                <TableRow>\n                                    <TableCell align=\"left\">Region</TableCell>\n                                    <TableCell align=\"left\">Transcription</TableCell>\n                                    <TableCell align=\"left\">Audio</TableCell>\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {rows.map((row) => (\n                                    <TableRow key={row.region}>\n                                        <TableCell align=\"left\" size=\"small\" scope=\"row\">\n                                            {row.region}\n                                        </TableCell>\n                                        <TableCell align=\"left\">{row.transcription}</TableCell>\n                                        <TableCell align=\"left\">{row.audio?<audio  src={row.audio} className={classes.sound} controls></audio>:'No Audio'}</TableCell>\n                                    </TableRow>\n                                ))}\n                            </TableBody>\n                        </Table>\n                    </TableContainer>\n                </Typography>\n            </CardContent>\n        </Card>\n    )\n}\n\nexport default PronunciationCard\n","import React from 'react'\nimport Card from '@material-ui/core/Card';\nimport Typography from '@material-ui/core/Typography';\nimport CardContent from '@material-ui/core/CardContent';\n\n\nconst InterpretationCard = ({dataEntry}) => {\n    console.log(dataEntry)\n    return (\n        <Card className=\"entrie_card\">\n            <CardContent>\n                <Typography>\n                    <strong>palabra</strong>\n                </Typography>\n            </CardContent>\n        </Card>\n    )\n}\n\nexport default InterpretationCard\n","import React from 'react'\nimport Card from '@material-ui/core/Card';\nimport Typography from '@material-ui/core/Typography';\nimport CardContent from '@material-ui/core/CardContent';\n\nconst LexemesCard = ({dataEntry}) => {\n    console.log(dataEntry)\n    return (\n        <Card className=\"entrie_card\">\n            <CardContent>\n                <Typography>\n                    <strong>palabra</strong>\n                </Typography>\n            </CardContent>\n        </Card>\n    )\n}\n\nexport default LexemesCard\n","import React from 'react'\nimport PronunciationCard from '../PronunciationCard'\nimport InterpretationCard from '../InterpretationCard'\nimport LexemesCard from '../LexemesCard'\n\nconst renderCards = (responseArrayData) => {\n    return (\n        <div>\n            <PronunciationCard nameEntry={responseArrayData['entry']} dataEntry={responseArrayData['pronunciations']} />\n            <InterpretationCard dataEntry={responseArrayData['interpretations']} />\n            <LexemesCard dataEntry={responseArrayData['lexemes']} />\n        </div>\n    )\n}\n\nconst ResultList = ({ responseArray }) => {\n    console.log(responseArray)\n    return (\n        <div>\n            {/* {responseArray.entries? responseArray.entries[0].entry: \"no hay nada\" } */}\n            {responseArray['entry'] ?renderCards(responseArray) : (\"no hay nada\")}\n\n        </div>\n    )\n}\n\nexport default ResultList;\n","import React, { useState, useEffect, FC } from 'react'\nimport NavBar from './components/NavBar';\nimport SearchCard from './components/searchCard';\nimport ResultList from './components/ResultList'\nimport Container from '@material-ui/core/Container';\n// import Typography from '@material-ui/core/Typography';\n// require('dotenv').config()\nimport axios from 'axios';\n\n\nimport './App.css';\n\nconst App: FC = () => {\n\n  const [resultSearch, setResultSearch] = useState({})\n  const [word, setWord] = useState('');\n\n\n\n\n  useEffect(() => {\n\n    const getDictionary = async (palabra) => {\n      console.log('get dictionary', palabra)\n      try {\n        if (palabra !== '') {\n          const response = await axios.request({\n            method: 'GET',\n            baseURL: 'https://lingua-robot.p.rapidapi.com/language/v1',\n            url: `/entries/en/${palabra}`,\n            headers: {\n              'x-rapidapi-key': `${process.env.REACT_APP_API_KEY}`,\n              'x-rapidapi-host': 'lingua-robot.p.rapidapi.com'\n            }\n          });\n          const dataProcessed = processResponse(response.data.entries);\n          setResultSearch(dataProcessed);\n        }\n      } catch (error) {\n        console.log('Ã‰RROR', error)\n      }\n    }\n\n    const processResponse = (values: any[]) => {\n      console.log('pross', values)\n      const objProcessed = {}\n      Object.keys(values[0]).forEach(key => {\n        // console.log(key)\n        if (key !== 'entry') {\n          const array1 = values.map(dato => dato[key]);\n          // console.log('array1', array1)\n          const array2 = [].concat(...array1);\n          // console.log('array2', array2)\n          const uniqueArray = uniq(array2.map(data => JSON.stringify(data))).map(dataUniq => JSON.parse(dataUniq))\n          // console.log('uniqueArray1', uniqueArray)\n          objProcessed[key] = uniqueArray\n        }\n      });\n      // console.log(objProcessed)\n      objProcessed['entry'] = values[0]['entry']\n      delete objProcessed['license']\n      delete objProcessed['sourceUrls']\n      return objProcessed\n    }\n    // // return () => {\n    // //   cleanup\n    // // }\n    getDictionary(word);\n  }, [word])\n\n  function uniq(a) {\n    var seen = {};\n    return a.filter(function (item) {\n      return seen.hasOwnProperty(item) ? false : (seen[item] = true);\n    });\n  }\n\n  return (\n    <div className=\"contenedor_general\">\n      <NavBar />\n      <Container fixed>\n        <SearchCard onTipeWord={(value) => {\n          console.log(value)\n          setWord(value);\n        }} />\n        <br />\n        <ResultList responseArray={resultSearch} ></ResultList>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(<App />,                                    \n  document.getElementById('root'))\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}