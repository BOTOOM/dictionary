{"version":3,"sources":["components/NavBar/index.tsx","components/PageNotFound/index.tsx","components/PronunciationCard/index.tsx","components/LexemesCard/index.tsx","components/EntrieCard/index.tsx","components/BannerAcademic/index.tsx","components/ResultList/index.tsx","components/searchCard/index.tsx","components/WordNotFound/index.tsx","pages/academic/index.tsx","components/CardUrbanDefinition/index.tsx","components/ResultListUrban/index.tsx","pages/urban/index.tsx","App.tsx","reportWebVitals.js","index.tsx"],"names":["useStyles","makeStyles","theme","createStyles","root","flexGrow","margin","padding","menuButton","marginRight","spacing","title","NavBar","classes","className","AppBar","position","Toolbar","IconButton","edge","color","aria-label","Typography","variant","PageNotFound","history","useHistory","onClickHandler","React","useCallback","push","style","backgroundImage","process","Button","onClick","table","marginTop","sound","maxWidth","paddingRight","paddingLeft","PronunciationCard","dataEntry","useState","proninciation","setProninciation","useEffect","rows","map","data","region","transcription","audio","Card","CardContent","length","TableContainer","component","Paper","Table","TableHead","TableRow","TableCell","align","TableBody","row","index","size","scope","src","controls","LexemesCard","console","log","lexemes","setLexemes","lexem","Accordion","AccordionSummary","expandIcon","aria-controls","id","AccordionDetails","Grid","container","item","md","xs","List","sense","ListItem","ListItemText","labelunit","Chip","label","filter","aton","hasOwnProperty","lememAntonym","antonymList","Divider","synom","lememSynonym","undefined","synonymList","EntrieCard","BannerAcademic","nameImage","ResultList","responseArrayData","responseArray","Object","keys","minWidth","texto","boton","bullet","display","transform","SearchCard","prop","onTipeWord","word","values","setValues","sendWord","toLowerCase","TextField","onChange","event","target","value","onKeyDown","e","key","WordNotFound","Academic","resultSearch","setResultSearch","setWord","searcking","setSearcking","uniq","a","seen","getDictionary","palabra","axios","request","method","baseURL","url","headers","response","dataProcessed","processResponse","entries","objProcessed","properties","arrayData","arr","obj","concat","getAllJsonProperties","forEach","array1","dato","array2","uniqueArray","JSON","stringify","dataUniq","parse","LinearProgress","CardUrbanDefinition","definition","ResultListUrban","Urban","params","term","list","App","Container","fixed","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","basename","document","getElementById"],"mappings":"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","file":"static/js/main.afb847aa.chunk.js","sourcesContent":["import React from 'react';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\n// import Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n      margin: 0,\n      padding: 0\n    },\n    menuButton: {\n      marginRight: theme.spacing(2),\n    },\n    title: {\n      flexGrow: 1,\n    },\n  }),\n);\n\nexport default function NavBar() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" className={classes.title}>\n            Dictionary\n          </Typography>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n","import React from 'react'\nimport { useHistory } from 'react-router-dom'\nimport Button from '@material-ui/core/Button';\n\nimport './index.css'\nconst PageNotFound = () => {\n    const history = useHistory()\n\n    const onClickHandler = React.useCallback(() => {\n        history.push(`/academic`)\n    }, [history])\n\n    return (\n        <div className=\"container-notfound\" style={{\n            backgroundImage: `url(${process.env.PUBLIC_URL + '/assets/empty.svg'})`\n        }}>\n            <Button variant=\"contained\" color=\"primary\" onClick={onClickHandler}>\n                Go to Home\n      </Button>\n        </div>\n    )\n}\n\nexport default PageNotFound\n","import React, { useState, useEffect } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\n\nconst useStyles = makeStyles({\n    table: {\n        marginTop: 1,\n    },\n    sound: {\n        maxWidth: 105,\n        paddingRight: 30,\n        paddingLeft: 1\n    }\n});\n\nfunction createData(region, transcription, audio) {\n    return { region, transcription, audio };\n}\n\nconst PronunciationCard = ({ dataEntry }) => {\n    const [proninciation, setProninciation] = useState([]);\n    const classes = useStyles();\n\n    useEffect(() => {\n        // console.log('PRONUNCIATION', dataEntry)\n        const rows = (dataEntry as any[]).map(data => {\n            return createData(data['context']['regions'], data['transcriptions'] ? data['transcriptions'][0]['transcription'] : '', data['audio'] ? data['audio']['url'] : null)\n        });\n        // console.log(dataEntry)\n        // console.log('ROWS', rows)\n        setProninciation(rows)\n        // return () => {\n        //     cleanup\n        // }\n    }, [dataEntry])\n\n    return (\n        <Card className=\"entrie_card\">\n            <CardContent>\n                {/* <Typography> */}\n                    <strong>Pronunciation</strong>\n                    <br />\n                    <br />\n                    {proninciation.length > 0 ? <TableContainer component={Paper}>\n                        <Table className={classes.table} aria-label=\"simple table\">\n                            <TableHead>\n                                <TableRow>\n                                    <TableCell align=\"left\">Region</TableCell>\n                                    <TableCell align=\"left\">Transcription</TableCell>\n                                    <TableCell align=\"left\">Audio</TableCell>\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {proninciation.map((row, index) => (\n                                    <TableRow key={`${row.region}-${index}`}>\n                                        <TableCell align=\"left\" size=\"small\" scope=\"row\">\n                                            {row.region}\n                                        </TableCell>\n                                        <TableCell align=\"left\">{row.transcription}</TableCell>\n                                        <TableCell align=\"left\">{row.audio ? <audio src={row.audio} className={classes.sound} controls></audio> : 'No Audio'}</TableCell>\n                                    </TableRow>\n                                ))}\n                            </TableBody>\n                        </Table>\n                    </TableContainer> : ''}\n                {/* </Typography> */}\n            </CardContent>\n        </Card>\n    )\n}\n\nexport default PronunciationCard\n","import React, { useEffect, useState } from 'react'\nimport Card from '@material-ui/core/Card';\nimport Typography from '@material-ui/core/Typography';\nimport CardContent from '@material-ui/core/CardContent';\nimport Chip from '@material-ui/core/Chip';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Accordion from '@material-ui/core/Accordion';\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport Divider from '@material-ui/core/Divider';\nimport Grid from '@material-ui/core/Grid'\n\nimport './lexem.css';\n\n\nconst LexemesCard = ({ dataEntry }) => {\n    console.log('LEXE', dataEntry)\n    const [lexemes, setLexemes] = useState([])\n\n    useEffect(() => {\n        setLexemes(dataEntry)\n        // return () => {\n        //     cleanup\n        // }\n    }, [dataEntry])\n    return (\n        <Card className=\"entrie_card\">\n            {\n                lexemes.length > 0 ? <CardContent>\n                    <div>\n                        <strong>Lexemes</strong>\n                        <br />\n                        <br />\n                        {lexemes.map((lexem, index) => {\n                            return (\n                                <div key={`${lexem['lemma']}-${index}`}>\n                                    <Accordion>\n                                        <AccordionSummary\n                                            expandIcon={<ExpandMoreIcon />}\n                                            aria-controls=\"panel1a-content\"\n                                            id=\"panel1a-header\" >\n                                            <Typography>Definitions: {lexem['lemma']} | <small>{lexem['partOfSpeech']}</small> </Typography>\n                                        </AccordionSummary>\n                                        <AccordionDetails>\n                                            <Grid container>\n                                                <Grid item md={12} xs={12}>\n                                                    <List className=\"lista\">\n\n                                                        {lexem['senses'].map((sense, index) => {\n                                                            return (\n                                                                <ListItem key={`${sense['definition'].length}-${index}`} >\n                                                                    <ListItemText>\n                                                                        {sense['labels'] ? sense['labels'].map((labelunit) => (<Chip\n                                                                            label={labelunit}\n                                                                            color=\"secondary\"\n                                                                            size=\"small\"\n                                                                            className=\"chips\"\n                                                                        />)) : ''}   {sense['definition']}\n                                                                        <br />\n                                                                        {sense['usageExamples'] ? <div>\n                                                                            <small><strong>Example:</strong></small>\n                                                                            {sense['usageExamples']}\n                                                                        </div> : ''}\n                                                                    </ListItemText>\n                                                                </ListItem>\n                                                            )\n                                                        })\n                                                        }\n                                                    </List>\n\n                                                </Grid>\n                                            </Grid>\n                                        </AccordionDetails>\n                                    </Accordion>\n                                </div>\n                            )\n                        })}\n                        <br />\n                        {lexemes.map(data => data['antonymSets']).length > 0 ?\n                            <Accordion>\n                                <AccordionSummary\n                                    expandIcon={<ExpandMoreIcon />}\n                                    aria-controls=\"panel1a-content\"\n                                    id=\"panel1a-header\" >\n                                    <Typography variant=\"h6\">Antonyms  </Typography>\n                                </AccordionSummary>\n                                <AccordionDetails>\n                                    <Grid container>\n                                        <Grid item md={12} xs={12}>\n                                            <List className=\"lista\">\n                                                {lexemes.filter(aton => aton.hasOwnProperty('antonymSets')).map((lememAntonym, index) => {\n                                                    return (\n                                                        <ListItem key={`${lememAntonym['lemma']}-${index}-antonym`}>\n                                                            {\n                                                                <List >\n                                                                    {\n                                                                        lememAntonym['antonymSets'] ? lememAntonym['antonymSets'].map((antonymList) => {\n                                                                            return (\n                                                                                <ListItem className=\"items_antonimos\" key={`${antonymList['antonyms'].length}-${antonymList['sense']}`}>\n                                                                                    {antonymList['sense']?`${antonymList['antonyms']}  :   ${antonymList['sense']}`:`${antonymList['antonyms']}`}\n                                                                                    <Divider />\n                                                                                </ListItem>\n                                                                            )\n                                                                        }) : ''\n                                                                    }\n                                                                </List>\n\n                                                            }\n                                                        </ListItem>\n                                                    )\n                                                })}\n                                            </List>\n                                        </Grid>\n                                    </Grid>\n                                </AccordionDetails>\n                            </Accordion> : ''}\n                            <br />\n                        {lexemes.map(data => data['synonymSets']).length > 0 ?\n                            <Accordion>\n                                <AccordionSummary\n                                    expandIcon={<ExpandMoreIcon />}\n                                    aria-controls=\"panel1a-content\"\n                                    id=\"panel1a-header\" >\n                                    <Typography variant=\"h6\">Synonyms</Typography>\n                                </AccordionSummary>\n                                <AccordionDetails>\n                                    <Grid container>\n                                        <Grid item md={12} xs={12}>\n                                            <List className=\"lista\">\n                                                {lexemes.filter(synom => synom.hasOwnProperty('synonymSets')).map((lememSynonym, index) => {\n                                                    return (\n                                                        <ListItem key={`${lememSynonym['lemma']}-${index}-synonym`}>\n                                                            {\n                                                                <List >\n                                                                    {\n                                                                        lememSynonym['synonymSets'] !== undefined && lememSynonym['synonymSets'].map((synonymList) => {\n                                                                            return (\n                                                                                <ListItem className=\"items_antonimos\" key={`${synonymList['synonyms'].length}-${synonymList['sense']}`}>\n                                                                                    {/* {`${synonymList['synonyms']}  :   ${synonymList['sense']}`} */}\n                                                                                    {synonymList['sense']?`${synonymList['synonyms']}  :   ${synonymList['sense']}`:`${synonymList['synonyms']}`}\n\n                                                                                    <Divider />\n                                                                                </ListItem>\n                                                                            )\n                                                                        })\n                                                                    }\n                                                                </List>\n\n                                                            }\n                                                        </ListItem>\n                                                    )\n                                                })}\n                                            </List>\n                                        </Grid>\n                                    </Grid>\n                                </AccordionDetails>\n                            </Accordion> : ''}\n                            <br/>\n                            {/* <div>\n                            <Accordion className=\"acordeon\">\n                                <AccordionSummary className=\"acordeon\"\n                                    expandIcon={<ExpandMoreIcon />}\n                                    aria-controls=\"panel1a-content1\"\n                                    id=\"panel1a-header1\" >\n                                    <Typography variant=\"h6\">Froms </Typography>\n                                </AccordionSummary>\n                                <AccordionDetails>holis </AccordionDetails>\n                            </Accordion>\n                            </div> */}\n\n                    </div>\n                </CardContent> : ''\n            }\n        </Card>\n    )\n}\n\nexport default LexemesCard\n","import React from 'react'\nimport Card from '@material-ui/core/Card';\nimport Typography from '@material-ui/core/Typography';\nimport CardContent from '@material-ui/core/CardContent';\n\n\n\nconst EntrieCard = ({dataEntry}) => {\n    return (\n        <Card className=\"entrie_card\">\n            <CardContent>\n                <Typography>\n                    <strong>{dataEntry}</strong>\n                </Typography>\n            </CardContent>\n        </Card>\n    )\n}\n\nexport default EntrieCard\n","import React from 'react'\n\nimport './index.css'\nconst BannerAcademic = ({nameImage}) => {\n   \n\n    return (\n        <div className=\"container-notfound\" style={{\n            backgroundImage: `url(${process.env.PUBLIC_URL}/assets/${nameImage}.svg)`\n        }}>\n        </div>\n    )\n}\n\nexport default BannerAcademic\n","import React from 'react'\nimport PronunciationCard from '../PronunciationCard'\n// import InterpretationCard from '../InterpretationCard'\nimport LexemesCard from '../LexemesCard'\nimport EntrieCard from '../EntrieCard'\nimport BannerAcademic from '../BannerAcademic'\n\nconst renderCards = (responseArrayData) => {\n    return (\n        <div>\n            <EntrieCard dataEntry={responseArrayData['entry']} />\n            {responseArrayData.hasOwnProperty('pronunciations') && <PronunciationCard dataEntry={responseArrayData['pronunciations']} />}\n            {/* {responseArrayData['interpretations'] ?<InterpretationCard dataEntry={responseArrayData['interpretations']} />:'' } */}\n            {responseArrayData['lexemes']?<LexemesCard dataEntry={responseArrayData['lexemes']} />:'Lexemes not Found'}\n        </div>\n    )\n}\n\nconst ResultList = ({ responseArray }) => {\n    return (\n        <div>\n            {( Object.keys(responseArray).length > 0 ) ?renderCards(responseArray) : \n            <BannerAcademic nameImage='academic' />}\n        </div>\n    )\n}\n\nexport default ResultList;\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\n// import CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport { useHistory } from 'react-router-dom'\n\n\nconst useStyles = makeStyles({\n    root: {\n        minWidth: 275,\n        marginTop: 20\n    },\n    texto: {\n        margin: '0 2px',\n    },\n    boton: {\n        margin: '0 2px',\n        // height: '150%'\n    },\n    bullet: {\n        display: 'inline-block',\n        margin: '0 2px',\n        transform: 'scale(0.8)',\n    },\n});\n\ninterface State {\n    word: string;\n}\n\nconst SearchCard = ({ onTipeWord }) => {\n    const classes = useStyles();\n    const history = useHistory()\n    // const [dictionary, setDictionary] = useState('Academic')\n\n    // const bull = <span className={classes.bullet}>•</span>;\n\n    const [values, setValues] = React.useState<State>({\n        word: '',\n    });\n\n    const _handleKeyDown = (e: any) => {\n        if (e.key === 'Enter') {\n            console.log('do validate', values.word);\n            sendWord();\n        }\n    }\n\n    const handleChange = (prop: keyof State) => (event: React.ChangeEvent<HTMLInputElement>) => {\n        setValues({ ...values, [prop]: event.target.value });\n    };\n\n    const sendWord = () => {\n        onTipeWord(values.word.toLowerCase());\n    }\n\n    const onClickHandler = React.useCallback(() => {\n        console.log(history)\n        // history.push(`/urban`)\n        if (history['location']['pathname'] === \"/urban\") {\n            // setDictionary('Academic')\n            history.push(`/academic`)\n            return;\n        }\n        if (history['location']['pathname'] === \"/academic\") {\n            history.push(`/urban`)\n            // setDictionary('Urban')\n            return;\n        }\n    }, [history])\n\n    return (\n        <Card className={classes.root}>\n            <CardContent>\n\n                <Typography variant=\"h5\" component=\"h2\">\n                    What word do you want to search for?\n                  </Typography>\n                <TextField size=\"small\" className={classes.texto} id=\"outlined-basic\" label=\"Type your word\" variant=\"outlined\"\n                    onChange={handleChange('word')} onKeyDown={_handleKeyDown} value={values.word} />\n                <Button className={classes.boton} size=\"large\" variant=\"outlined\" color=\"primary\" onClick={sendWord}>\n                    Search\n                </Button>\n                <Button className={classes.boton} size=\"large\" variant=\"outlined\" color=\"secondary\" onClick={onClickHandler}>\n                    Academic / Urban\n                </Button>\n            </CardContent>\n        </Card>\n    );\n}\n\nexport default SearchCard;","import React from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport './index.css'\n\n\nconst WordNotFound = ({ word }) => {\n    return (\n        <Card className=\"CardError\" >\n            <CardContent>\n                    <strong>{word}</strong>  not found\n            </CardContent>\n        </Card>\n    )\n}\n\nexport default WordNotFound\n","import axios from 'axios';\nimport React, { useEffect, useState } from 'react'\nimport ResultList from '../../components/ResultList';\nimport SearchCard from '../../components/searchCard';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport WordNotFound from '../../components/WordNotFound';\n\n\nconst Academic = () => {\n    const [resultSearch, setResultSearch] = useState({})\n    const [word, setWord] = useState('');\n    const [searcking, setSearcking] = useState(false)\n\n\n  useEffect(() => {\n\n    const getDictionary = async (palabra) => {\n      console.log('get dictionary', palabra)\n      try {\n        if (palabra !== '') {\n          setSearcking(true)\n          const response = await axios.request({\n            method: 'GET',\n            baseURL: 'https://lingua-robot.p.rapidapi.com/language/v1',\n            url: `/entries/en/${palabra}`,\n            headers: {\n              'x-rapidapi-key': `${process.env.REACT_APP_API_KEY}`,\n              'x-rapidapi-host': 'lingua-robot.p.rapidapi.com'\n            }\n          });\n          const dataProcessed = processResponse(response.data.entries);\n          setResultSearch(dataProcessed);\n          setSearcking(false)\n        }\n      } catch (error) {\n        console.log('ÉRROR', error)\n        setSearcking(false)\n      }\n    }\n\n    const getAllJsonProperties = (arrayData: any[]): any[] => {\n      const arr = arrayData.map(data => Object.keys(data))\n      const obj = uniq([].concat(...arr));\n      console.log('obj',obj)\n      return obj\n    }\n\n    const processResponse = (values: any[]) => {\n      console.log('pross', values)\n      const objProcessed = {}\n      const properties = getAllJsonProperties(values)\n      if (properties.length > 0 ) {\n        properties.forEach(key => {\n          // console.log(key)\n          if (key !== 'entry') {\n            const array1 = values.map(dato => dato[key]);\n            // console.log('array1', array1)\n            const array2 = [].concat(...array1.filter(data => data!== undefined));\n            console.log('array2', array2)\n            const uniqueArray = uniq(array2.map(data => JSON.stringify(data))).map(dataUniq => JSON.parse(dataUniq))\n            console.log('uniqueArray1', uniqueArray)\n            objProcessed[key] = uniqueArray\n          }\n        });\n        // console.log(objProcessed)\n        objProcessed['entry'] = values[0]['entry']\n        delete objProcessed['license']\n        delete objProcessed['sourceUrls']\n      }\n      return objProcessed\n    }\n    // // return () => {\n    // //   cleanup\n    // // }\n    getDictionary(word);\n  }, [word])\n  function uniq(a) {\n    var seen = {};\n    return a.filter(function (item) {\n      return seen.hasOwnProperty(item) ? false : (seen[item] = true);\n    });\n  }\n  \n    return (\n        <div>\n            <SearchCard onTipeWord={(value) => {\n          console.log(value)\n          setWord(value);\n        }} />\n        <br />\n        {searcking &&  <LinearProgress />}\n        {(Object.keys(resultSearch).length === 0 && word.length > 0 && searcking === false) && <WordNotFound word={word}/> }\n        <ResultList responseArray={resultSearch} ></ResultList>\n        </div>\n    )\n}\n\nexport default Academic\n","import React from 'react'\nimport Card from '@material-ui/core/Card';\nimport Typography from '@material-ui/core/Typography';\nimport CardContent from '@material-ui/core/CardContent';\n\nconst CardUrbanDefinition = ({definition}) => {\n    return (\n        <Card className=\"entrie_card\">\n            <CardContent>\n                <Typography>\n                    {definition.definition}\n                </Typography>\n            </CardContent>\n        </Card>\n    )\n}\n\nexport default CardUrbanDefinition\n","import React from 'react'\nimport BannerAcademic from '../BannerAcademic'\nimport CardUrbanDefinition from '../CardUrbanDefinition'\n\nconst ResultListUrban = ({responseArray}) => {\n    return (\n        <div>\n            {( responseArray.length > 0 ) ?responseArray.map( (response,index) => {\n                return (\n                    <CardUrbanDefinition key={`${index}-urban`}  definition={response}/>\n                )\n            } ) : \n            <BannerAcademic nameImage='urban'/>}\n        </div>\n    )\n}\n\nexport default ResultListUrban\n","import { LinearProgress } from '@material-ui/core';\nimport axios from 'axios';\nimport React, { useEffect, useState } from 'react'\nimport ResultListUrban from '../../components/ResultListUrban';\nimport SearchCard from '../../components/searchCard';\nimport WordNotFound from '../../components/WordNotFound';\n\nconst Urban = () => {\n    const [word, setWord] = useState('');\n    const [searcking, setSearcking] = useState(false)\n\n    const [resultSearch, setResultSearch] = useState([])\n    useEffect(() => {\n\n        const getDictionary = async (palabra) => {\n          console.log('get dictionary', palabra)\n          try {\n            if (palabra !== '') {\n              setSearcking(true)\n\n              const response = await axios.request({\n                method: 'GET',\n                url: 'https://mashape-community-urban-dictionary.p.rapidapi.com/define',\n                params: {term: palabra},\n                headers: {\n                  'x-rapidapi-key': `${process.env.REACT_APP_API_KEY}`,\n                  'x-rapidapi-host': 'mashape-community-urban-dictionary.p.rapidapi.com'                }\n              });\n              console.log(response)\n            //   const dataProcessed = processResponse(response.data.entries);\n              setResultSearch(response.data.list);\n            setSearcking(false)\n\n            }\n          } catch (error) {\n            console.log('ÉRROR', error)\n            setSearcking(false)\n\n          }\n        }\n    \n        \n        // // return () => {\n        // //   cleanup\n        // // }\n        getDictionary(word);\n      }, [word])\n\n    return (\n        <div>\n            <SearchCard onTipeWord={(value) => {\n          console.log(value)\n          setWord(value);\n        }} />\n        <br />\n        {searcking &&  <LinearProgress />}\n        {(resultSearch.length === 0 && word.length > 0 && searcking === false) && <WordNotFound word={word}/> }\n        <ResultListUrban  responseArray={resultSearch} />\n        </div>\n    )\n}\n\nexport default Urban\n","import React, {FC } from 'react'\nimport NavBar from './components/NavBar';\nimport Container from '@material-ui/core/Container';\n\nimport {\n  // BrowserRouter as Router,\n  Switch,\n  Route\n} from 'react-router-dom'\n\n\nimport './App.css';\nimport PageNotFound from './components/PageNotFound';\nimport Academic from './pages/academic';\nimport Urban from './pages/urban';\n\nconst App: FC = () => {\n\n  return (\n    <div className=\"contenedor_general\">\n      <NavBar />\n      <Container fixed>\n        {/* <Router> */}\n          <Switch>\n            <Route exact path=\"/academic\">\n              <Academic/> \n            </Route>\n            <Route path=\"/urban\">\n              <Urban/>\n            </Route>\n            <Route>\n              <PageNotFound/>\n            </Route>\n          </Switch>\n        {/* </Router> */}\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {HashRouter} from 'react-router-dom'\n\nReactDOM.render(\n<HashRouter\n  basename={''}\n  // getUserConfirmation={optionalFunc}\n  // hashType={optionalString}\n>\n<App />\n</HashRouter>\n,                                    \n  document.getElementById('root'))\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}