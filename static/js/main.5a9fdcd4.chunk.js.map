{"version":3,"sources":["components/NavBar/index.tsx","components/searchCard/index.tsx","components/PronunciationCard/index.tsx","components/LexemesCard/index.tsx","components/ResultList/index.tsx","App.tsx","reportWebVitals.js","index.tsx"],"names":["useStyles","makeStyles","theme","createStyles","root","flexGrow","margin","padding","menuButton","marginRight","spacing","title","NavBar","classes","className","AppBar","position","Toolbar","IconButton","edge","color","aria-label","Typography","variant","minWidth","marginTop","texto","boton","bullet","display","transform","SearchCard","prop","onTipeWord","React","useState","word","values","setValues","sendWord","Card","CardContent","component","TextField","size","id","label","onChange","event","target","value","onKeyDown","e","key","console","log","Button","onClick","table","sound","maxWidth","paddingRight","paddingLeft","PronunciationCard","dataEntry","proninciation","setProninciation","useEffect","rows","map","data","region","transcription","audio","length","TableContainer","Paper","Table","TableHead","TableRow","TableCell","align","TableBody","row","index","scope","src","controls","LexemesCard","lexemes","setLexemes","lexem","Accordion","AccordionSummary","expandIcon","aria-controls","AccordionDetails","Grid","container","item","md","xs","List","sense","ListItem","ListItemText","labelunit","Chip","ResultList","responseArrayData","responseArray","App","resultSearch","setResultSearch","setWord","getDictionary","palabra","a","axios","request","method","baseURL","url","headers","process","response","dataProcessed","processResponse","entries","objProcessed","Object","keys","forEach","array1","dato","uniqueArray","seen","filter","hasOwnProperty","uniq","concat","JSON","stringify","dataUniq","parse","Container","fixed","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5a9fdcd4.chunk.js","sourcesContent":["import React from 'react';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\n// import Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n      margin: 0,\n      padding: 0\n    },\n    menuButton: {\n      marginRight: theme.spacing(2),\n    },\n    title: {\n      flexGrow: 1,\n    },\n  }),\n);\n\nexport default function NavBar() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" className={classes.title}>\n            Dictionary\n          </Typography>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\n// import CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\n\nconst useStyles = makeStyles({\n    root: {\n        minWidth: 275,\n        marginTop: 20\n    },\n    texto: {\n        margin: '0 2px',\n    },\n    boton: {\n        margin: '0 2px',\n        // height: '150%'\n    },\n    bullet: {\n        display: 'inline-block',\n        margin: '0 2px',\n        transform: 'scale(0.8)',\n    },\n});\n\ninterface State {\n    word: string;\n}\n\nconst SearchCard = ({ onTipeWord }) => {\n    const classes = useStyles();\n    // const bull = <span className={classes.bullet}>â€¢</span>;\n\n    const [values, setValues] = React.useState<State>({\n        word: '',\n    });\n\n    const _handleKeyDown = (e: any) => {\n        if (e.key === 'Enter') {\n            console.log('do validate', values.word);\n            sendWord();\n        }\n    }\n\n    const handleChange = (prop: keyof State) => (event: React.ChangeEvent<HTMLInputElement>) => {\n        setValues({ ...values, [prop]: event.target.value });\n    };\n\n    const sendWord = () => {\n        onTipeWord(values.word);\n    }\n\n    return (\n        <Card className={classes.root}>\n            <CardContent>\n\n                <Typography variant=\"h5\" component=\"h2\">\n                    What word do you want to search for?\n        </Typography>\n                <TextField size=\"small\" className={classes.texto} id=\"outlined-basic\" label=\"Type your word\" variant=\"outlined\"\n                    onChange={handleChange('word')} onKeyDown={_handleKeyDown} value={values.word} />\n                <Button className={classes.boton} size=\"large\" variant=\"outlined\" color=\"primary\" onClick={sendWord}>\n                    Search\n                </Button>\n            </CardContent>\n        </Card>\n    );\n}\n\nexport default SearchCard;","import React, { useState, useEffect } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\n\nconst useStyles = makeStyles({\n    table: {\n        marginTop: 1,\n    },\n    sound: {\n        maxWidth: 105,\n        paddingRight: 30,\n        paddingLeft: 1\n    }\n});\n\nfunction createData(region, transcription, audio) {\n    return { region, transcription, audio };\n}\n\nconst PronunciationCard = ({ dataEntry }) => {\n    const [proninciation, setProninciation] = useState([]);\n    const classes = useStyles();\n\n    useEffect(() => {\n        // console.log('PRONUNCIATION', dataEntry)\n        const rows = (dataEntry as any[]).map(data => {\n            return createData(data['context']['regions'], data['transcriptions'] ? data['transcriptions'][0]['transcription'] : '', data['audio'] ? data['audio']['url'] : null)\n        });\n        // console.log(dataEntry)\n        // console.log('ROWS', rows)\n        setProninciation(rows)\n        // return () => {\n        //     cleanup\n        // }\n    }, [dataEntry])\n\n    return (\n        <Card className=\"entrie_card\">\n            <CardContent>\n                {/* <Typography> */}\n                    <strong>Pronunciation</strong>\n                    <br />\n                    <br />\n                    {proninciation.length > 0 ? <TableContainer component={Paper}>\n                        <Table className={classes.table} aria-label=\"simple table\">\n                            <TableHead>\n                                <TableRow>\n                                    <TableCell align=\"left\">Region</TableCell>\n                                    <TableCell align=\"left\">Transcription</TableCell>\n                                    <TableCell align=\"left\">Audio</TableCell>\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {proninciation.map((row, index) => (\n                                    <TableRow key={`${row.region}-${index}`}>\n                                        <TableCell align=\"left\" size=\"small\" scope=\"row\">\n                                            {row.region}\n                                        </TableCell>\n                                        <TableCell align=\"left\">{row.transcription}</TableCell>\n                                        <TableCell align=\"left\">{row.audio ? <audio src={row.audio} className={classes.sound} controls></audio> : 'No Audio'}</TableCell>\n                                    </TableRow>\n                                ))}\n                            </TableBody>\n                        </Table>\n                    </TableContainer> : ''}\n                {/* </Typography> */}\n            </CardContent>\n        </Card>\n    )\n}\n\nexport default PronunciationCard\n","import React, { useEffect, useState } from 'react'\nimport Card from '@material-ui/core/Card';\nimport Typography from '@material-ui/core/Typography';\nimport CardContent from '@material-ui/core/CardContent';\nimport Chip from '@material-ui/core/Chip';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Accordion from '@material-ui/core/Accordion';\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport Grid from '@material-ui/core/Grid'\n\nimport './lexem.css';\n\n\nconst LexemesCard = ({ dataEntry }) => {\n    console.log('LEXE', dataEntry)\n    const [lexemes, setLexemes] = useState([])\n\n    useEffect(() => {\n        setLexemes(dataEntry)\n        // return () => {\n        //     cleanup\n        // }\n    }, [dataEntry])\n    return (\n        <Card className=\"entrie_card\">\n            {\n                lexemes.length > 0 ? <CardContent>\n                    <div>\n                        <strong>Lexemes</strong>\n                        <br />\n                        <br />\n                        {lexemes.map((lexem, index) => {\n                            return (\n                                <div key={`${lexem['lemma']}-${index}`}>\n                                    <Accordion>\n                                        <AccordionSummary\n                                            expandIcon={<ExpandMoreIcon />}\n                                            aria-controls=\"panel1a-content\"\n                                            id=\"panel1a-header\" >\n                                            <Typography>Definitions: {lexem['lemma']} | <small>{lexem['partOfSpeech']}</small> </Typography>\n                                        </AccordionSummary>\n                                        <AccordionDetails>\n                                            <Grid container>\n                                                <Grid item md={12} xs={12}>\n                                                    <List className=\"lista\">\n\n                                                        {lexem['senses'].map((sense, index) => {\n                                                            return (\n                                                                <ListItem key={`${sense['definition'].length}-${index}`} >\n                                                                    <ListItemText>\n                                                                        {sense['labels']?sense['labels'].map((labelunit) => (<Chip\n                                                                            label={labelunit}\n                                                                            color=\"secondary\"\n                                                                            size=\"small\"\n                                                                            className=\"chips\"\n                                                                        />)) :'' }   {sense['definition']}\n                                                                        <br />\n                                                                        {sense['usageExamples'] ? <div>\n                                                                            <small><strong>Example:</strong></small>\n                                                                            {sense['usageExamples']}\n                                                                        </div> : ''}\n                                                                    </ListItemText>\n                                                                </ListItem>\n                                                            )\n                                                        })\n                                                        }\n                                                    </List>\n\n                                                </Grid>\n                                            </Grid>\n                                        </AccordionDetails>\n                                    </Accordion>\n                                </div>\n                            )\n                        })}\n                    </div>\n                </CardContent> : ''\n            }\n        </Card>\n    )\n}\n\nexport default LexemesCard\n","import React from 'react'\nimport PronunciationCard from '../PronunciationCard'\n// import InterpretationCard from '../InterpretationCard'\nimport LexemesCard from '../LexemesCard'\n// import EntrieCard from '../EntrieCard'\n\nconst renderCards = (responseArrayData) => {\n    return (\n        <div>\n            {/* <EntrieCard dataEntry={responseArrayData['entry']} /> */}\n            {responseArrayData['pronunciations']?<PronunciationCard dataEntry={responseArrayData['pronunciations']} />: ''}\n            {/* {responseArrayData['interpretations'] ?<InterpretationCard dataEntry={responseArrayData['interpretations']} />:'' } */}\n            {responseArrayData['lexemes']?<LexemesCard dataEntry={responseArrayData['lexemes']} />:'Lexemes not Found'}\n        </div>\n    )\n}\n\nconst ResultList = ({ responseArray }) => {\n    console.log(responseArray)\n    return (\n        <div>\n            {/* {responseArray.entries? responseArray.entries[0].entry: \"no hay nada\" } */}\n            {responseArray['entry'] ?renderCards(responseArray) : (\"no hay nada\")}\n\n        </div>\n    )\n}\n\nexport default ResultList;\n","import React, { useState, useEffect, FC } from 'react'\nimport NavBar from './components/NavBar';\nimport SearchCard from './components/searchCard';\nimport ResultList from './components/ResultList'\nimport Container from '@material-ui/core/Container';\n// import Typography from '@material-ui/core/Typography';\n// require('dotenv').config()\nimport axios from 'axios';\n\n\nimport './App.css';\n\nconst App: FC = () => {\n\n  const [resultSearch, setResultSearch] = useState({})\n  const [word, setWord] = useState('');\n\n\n\n\n  useEffect(() => {\n\n    const getDictionary = async (palabra) => {\n      console.log('get dictionary', palabra)\n      try {\n        if (palabra !== '') {\n          const response = await axios.request({\n            method: 'GET',\n            baseURL: 'https://lingua-robot.p.rapidapi.com/language/v1',\n            url: `/entries/en/${palabra}`,\n            headers: {\n              'x-rapidapi-key': `${process.env.REACT_APP_API_KEY}`,\n              'x-rapidapi-host': 'lingua-robot.p.rapidapi.com'\n            }\n          });\n          const dataProcessed = processResponse(response.data.entries);\n          setResultSearch(dataProcessed);\n        }\n      } catch (error) {\n        console.log('Ã‰RROR', error)\n      }\n    }\n\n    const processResponse = (values: any[]) => {\n      console.log('pross', values)\n      const objProcessed = {}\n      Object.keys(values[0]).forEach(key => {\n        // console.log(key)\n        if (key !== 'entry') {\n          const array1 = values.map(dato => dato[key]);\n          // console.log('array1', array1)\n          const array2 = [].concat(...array1);\n          // console.log('array2', array2)\n          const uniqueArray = uniq(array2.map(data => JSON.stringify(data))).map(dataUniq => JSON.parse(dataUniq))\n          // console.log('uniqueArray1', uniqueArray)\n          objProcessed[key] = uniqueArray\n        }\n      });\n      // console.log(objProcessed)\n      objProcessed['entry'] = values[0]['entry']\n      delete objProcessed['license']\n      delete objProcessed['sourceUrls']\n      return objProcessed\n    }\n    // // return () => {\n    // //   cleanup\n    // // }\n    getDictionary(word);\n  }, [word])\n\n  function uniq(a) {\n    var seen = {};\n    return a.filter(function (item) {\n      return seen.hasOwnProperty(item) ? false : (seen[item] = true);\n    });\n  }\n\n  return (\n    <div className=\"contenedor_general\">\n      <NavBar />\n      <Container fixed>\n        <SearchCard onTipeWord={(value) => {\n          console.log(value)\n          setWord(value);\n        }} />\n        <br />\n        <ResultList responseArray={resultSearch} ></ResultList>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(<App />,                                    \n  document.getElementById('root'))\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}